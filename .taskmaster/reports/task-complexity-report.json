{
	"meta": {
		"generatedAt": "2025-10-18T05:52:55.501Z",
		"tasksAnalyzed": 10,
		"totalTasks": 10,
		"analysisCount": 10,
		"thresholdScore": 5,
		"projectName": "Taskmaster",
		"usedResearch": true
	},
	"complexityAnalysis": [
		{
			"taskId": 1,
			"taskTitle": "프로젝트 환경 설정 및 기본 구조 구축",
			"complexityScore": 3,
			"recommendedSubtasks": 4,
			"expansionPrompt": "프로젝트 초기 설정을 단계별로 나누어 가상환경 설정, 의존성 관리, 환경 변수 구성, 폴더 구조 생성으로 세분화하여 각각 독립적으로 구현할 수 있도록 계획",
			"reasoning": "표준적인 Python 프로젝트 설정 작업으로 복잡도는 낮지만, 여러 구성 요소(가상환경, 의존성, 환경변수, 폴더구조)를 포함하므로 체계적인 접근이 필요"
		},
		{
			"taskId": 2,
			"taskTitle": "이벤트 시스템 핵심 구현",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "이벤트 시스템을 핵심 컴포넌트별로 분리하여 Event 클래스 설계, EventBus 구현, 핸들러 인터페이스 정의, 우선순위 큐 구현, 비동기 디스패처 구현으로 세분화",
			"reasoning": "비동기 처리와 pub/sub 패턴을 포함한 복잡한 아키텍처 설계가 필요하며, 우선순위 큐와 에러 격리 등 고급 기능이 요구됨"
		},
		{
			"taskId": 3,
			"taskTitle": "바이낸스 API 연동 및 WebSocket 관리자 구현",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "API 연동을 단계별로 구현하여 ccxt.pro 초기화, WebSocket 연결 관리, 하트비트 모니터링, 재연결 로직, REST API 래퍼, 권한 검증으로 세분화",
			"reasoning": "외부 API 연동, WebSocket 실시간 통신, 연결 상태 관리, 자동 재연결 등 네트워크 관련 복잡한 로직과 에러 처리가 필요"
		},
		{
			"taskId": 4,
			"taskTitle": "실시간 캔들 데이터 수신 및 관리 시스템 구현",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "데이터 처리 파이프라인을 구성하여 캔들 데이터 모델 설계, 메모리 스토리지 구현, 과거 데이터 로드, 실시간 수신 처리, 멀티 심볼 지원으로 세분화",
			"reasoning": "실시간 데이터 처리, 메모리 관리, 멀티 심볼/타임프레임 지원 등 데이터 집약적 처리와 성능 최적화가 필요"
		},
		{
			"taskId": 5,
			"taskTitle": "SQLite 데이터베이스 설계 및 데이터 저장 레이어 구현",
			"complexityScore": 5,
			"recommendedSubtasks": 4,
			"expansionPrompt": "데이터베이스 레이어를 체계적으로 구현하여 스키마 설계, ORM 설정, 데이터 모델 구현, 연결 풀 및 마이그레이션 관리로 세분화",
			"reasoning": "데이터베이스 스키마 설계와 ORM 구현이 필요하지만, SQLite의 단순함으로 인해 중간 수준의 복잡도"
		},
		{
			"taskId": 6,
			"taskTitle": "ICT 지표 엔진 구현 - Order Blocks 및 Fair Value Gaps",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "복잡한 기술적 지표를 단계별로 구현하여 Order Blocks 감지 알고리즘, FVG 계산 로직, Breaker Blocks 인식, 멀티 타임프레임 처리, 지표 만료 관리, 성능 최적화로 세분화",
			"reasoning": "복잡한 기술적 분석 알고리즘 구현이 필요하며, 멀티 타임프레임 지원과 실시간 성능 최적화가 중요한 고난도 작업"
		},
		{
			"taskId": 7,
			"taskTitle": "ICT 지표 엔진 구현 - Liquidity 및 Market Structure",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "시장 구조 분석을 체계적으로 구현하여 유동성 레벨 식별, Liquidity Sweep 감지, 추세 분석, BMS 로직, 구조 상태 추적, 강도 계산으로 세분화",
			"reasoning": "고급 시장 구조 분석과 복잡한 패턴 인식 알고리즘이 필요하며, 실시간 처리 성능과 정확도가 중요한 고난도 작업"
		},
		{
			"taskId": 8,
			"taskTitle": "매매 전략 엔진 구현 - 3가지 전략 로직",
			"complexityScore": 9,
			"recommendedSubtasks": 7,
			"expansionPrompt": "복합적인 매매 전략을 체계적으로 구현하여 전략 A 로직, 전략 B 로직, 전략 C 로직, 신호 생성 시스템, 중복 필터링, 우선순위 관리, 전략 제어로 세분화",
			"reasoning": "다중 전략을 통합하는 복잡한 로직이 필요하며, 각 전략의 상호작용과 신호 생성의 정확성이 매우 중요한 최고 난도 작업"
		},
		{
			"taskId": 9,
			"taskTitle": "리스크 관리 시스템 구현",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "리스크 관리를 체계적으로 구현하여 포지션 사이징 계산, 손절/익절 레벨 설정, 일일 한도 모니터링, 실시간 손익 추적, 진입 제어 로직으로 세분화",
			"reasoning": "금융 리스크 관리의 핵심적인 계산과 실시간 모니터링이 필요하며, 정확성과 안정성이 매우 중요한 고위험 작업"
		},
		{
			"taskId": 10,
			"taskTitle": "주문 실행 및 포지션 관리 시스템 구현",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "주문 시스템을 안정적으로 구현하여 비동기 주문 실행, 재시도 로직, 주문 상태 추적, 포지션 관리, 포지션 복구, 긴급 청산으로 세분화",
			"reasoning": "실제 거래 주문을 처리하는 핵심 시스템으로 높은 안정성과 에러 처리가 필요하며, 비동기 처리와 상태 관리의 복잡성이 높음"
		}
	]
}