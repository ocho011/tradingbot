# Product Requirements Document (PRD)
# 바이낸스 선물 자동매매 봇 - ICT 전략 기반

## 1. 프로젝트 개요

### 1.1 프로젝트 명
바이낸스 선물 자동매매 봇 (Binance Futures Auto Trading Bot)

### 1.2 목적
ICT(Inner Circle Trader) 매매 전략을 활용한 암호화폐 무기한 선물 자동매매 시스템 구축

### 1.3 핵심 가치
- 실시간 시장 데이터 기반 자동화된 매매 의사결정
- 체계적인 리스크 관리 및 포지션 관리
- 투명한 모니터링 및 알람 시스템
- 안정적인 24/7 운영

## 2. 시장 및 운영 환경

### 2.1 거래소
- 플랫폼: 바이낸스(Binance)
- 시장: 선물 마켓 (무기한 달러 선물 / USDT Perpetual Futures)

### 2.2 거래 대상
- 기본: BTCUSDT, ETHUSDT (2개)
- 옵션: 알트코인 3개 추가 가능 (설정 가능)

### 2.3 운영 환경
- 클라우드: VULTR VM (Virtual Machine)
- 스펙: 최소 사양 (1-2 vCPU, 2-4GB RAM)
- OS: Ubuntu Linux
- 서비스 관리: systemd

### 2.4 개발 언어 및 프레임워크
- 언어: Python 3.10+
- 비동기 처리: asyncio + aiohttp
- 거래소 연동: ccxt.pro (WebSocket 지원)
- 웹 프레임워크: FastAPI (대시보드용)
- 데이터베이스: SQLite

## 3. 매매 전략 상세

### 3.1 ICT 지표 및 개념

#### 3.1.1 필수 지표
1. **Order Blocks (OB)**
   - 기관 주문 블록 감지
   - 지지/저항 레벨로 활용

2. **Fair Value Gaps (FVG)**
   - 가격 불균형 영역 식별
   - 진입/청산 기회 포착

3. **Breaker Blocks**
   - Order Block이 깨진 후 역할 전환 감지
   - 추세 전환 신호

4. **Liquidity (유동성)**
   - Buy-side Liquidity: 고점 상단의 스탑 로스 집중 구역
   - Sell-side Liquidity: 저점 하단의 스탑 로스 집중 구역
   - Liquidity Sweep: 유동성 사냥 패턴 감지

5. **Break of Market Structure (BMS)**
   - Higher High / Lower Low 패턴 인식
   - 추세 방향 확인

#### 3.1.2 제외 요소
- Session Times (Asian, London, New York): 사용하지 않음
- Killzones (특정 시간대): 사용하지 않음

### 3.2 타임프레임 전략

#### 3.2.1 사용 타임프레임
- **주요**: 15분, 1시간 (중단기 스윙/데이 트레이딩)
- **보조**: 1분 (진입 타이밍 최적화)

#### 3.2.2 멀티 타임프레임 분석
- 상위 타임프레임(1시간): 추세 방향 확인
- 중위 타임프레임(15분): 진입 시그널 생성
- 하위 타임프레임(1분): 진입 타이밍 최적화

### 3.3 매매 전략 구성

시스템은 3가지 독립적인 전략을 동시에 운영:

#### 전략 A (보수적)
**조건:**
1. 1시간 차트에서 BMS 확인
2. 15분 차트에서 FVG 또는 OB 형성
3. 1분 차트에서 진입 시그널 확인

**특징:** 안정적, 높은 승률, 낮은 빈도

#### 전략 B (공격적)
**조건:**
1. 15분 차트에서 Liquidity Sweep 발생
2. FVG 형성 즉시 진입

**특징:** 빠른 진입, 중간 승률, 높은 빈도

#### 전략 C (혼합)
**조건:**
1. 1시간 차트 추세 방향 확인
2. 15분 OB/FVG 형성
3. Liquidity 조건 충족 시 진입

**특징:** 균형 잡힌 접근, 중간 승률/빈도

### 3.4 리스크 관리

#### 3.4.1 포지션 사이징
- **거래당 리스크**: 계좌 잔고의 2%
- **레버리지**: 5배 고정
- **최대 일일 손실 한도**: 계좌 잔고의 6%
  - 한도 도달 시: 당일 모든 신규 진입 차단
  - 기존 포지션 유지 또는 청산 (설정 가능)

#### 3.4.2 손절(Stop Loss) 설정
- **기본 방식**: 구조적 레벨 기반
  - Order Block 반대편
  - FVG 반대편
  - Breaker Block 레벨
- **톨러런스**: 잦은 손절 방지용 버퍼 추가
  - 예: 구조적 SL ± 0.1-0.3% 톨러런스

#### 3.4.3 익절(Take Profit) 설정
- **기본 방식**: 다음 Liquidity 레벨까지
  - Buy 포지션: 다음 Buy-side Liquidity
  - Sell 포지션: 다음 Sell-side Liquidity

#### 3.4.4 포지션 관리
- **동시 포지션**: 현재 1개 (향후 확장 고려)
- **Trailing Stop**: 향후 추가 고려
- **Partial Take Profit**: 향후 추가 고려

### 3.5 백테스팅
- **데이터 기간**: 최근 1년
- **우선순위**: 정확성 > 속도
- **검증 항목**:
  - 승률 (Win Rate)
  - Profit Factor
  - Sharpe Ratio
  - Maximum Drawdown
  - 전략별 성과 비교

## 4. 시스템 아키텍처

### 4.1 이벤트 기반 아키텍처 (Event-Driven Architecture)

시스템은 **이벤트 기반 비동기 아키텍처**로 동작하며, 실시간 시장 데이터 및 시스템 상태 변화에 반응합니다.

#### 4.1.1 핵심 설계 원칙
- **반응형(Reactive)**: 외부 이벤트(시장 데이터, API 응답)에 즉각 반응
- **비동기(Asynchronous)**: asyncio 기반 논블로킹 처리
- **이벤트 루프(Event Loop)**: 단일 메인 이벤트 루프에서 모든 이벤트 처리
- **핸들러 분리(Handler Separation)**: 각 이벤트 유형별 독립적인 핸들러

#### 4.1.2 이벤트 종류 및 정의

**1. 캔들 이벤트 (Candle Events)**
```
이벤트명: candle_closed
트리거: WebSocket에서 새로운 캔들 마감 수신
데이터:
  - symbol: str (예: "BTCUSDT")
  - timeframe: str (예: "1m", "15m", "1h")
  - candle: dict (OHLCV 데이터)
  - timestamp: datetime

핸들러:
  1. 캔들 데이터 메모리 저장
  2. ICT 지표 재계산 트리거
  3. 전략 신호 평가 트리거
```

**2. 지표 업데이트 이벤트 (Indicator Events)**
```
이벤트명: indicators_updated
트리거: ICT 지표 계산 완료
데이터:
  - symbol: str
  - timeframe: str
  - indicators: dict
    - order_blocks: list
    - fvg: list
    - breaker_blocks: list
    - liquidity_zones: list
    - market_structure: dict

핸들러:
  1. 전략 엔진에 신호 평가 요청
  2. 대시보드 업데이트
```

**3. 전략 신호 이벤트 (Strategy Signal Events)**
```
이벤트명: signal_generated
트리거: 전략 조건 충족
데이터:
  - strategy_name: str (예: "Strategy_A")
  - symbol: str
  - direction: str ("LONG" | "SHORT")
  - entry_price: float
  - stop_loss: float
  - take_profit: float
  - confidence: float (0.0 - 1.0)

핸들러:
  1. 리스크 관리 검증
  2. 포지션 사이징 계산
  3. 주문 실행 트리거
```

**4. 주문 이벤트 (Order Events)**
```
이벤트명: order_placed, order_filled, order_failed, order_cancelled
트리거: 주문 생성/체결/실패/취소
데이터:
  - order_id: str
  - symbol: str
  - side: str ("BUY" | "SELL")
  - type: str ("MARKET" | "LIMIT" | "STOP_LOSS" | "TAKE_PROFIT")
  - quantity: float
  - price: float
  - status: str
  - timestamp: datetime

핸들러:
  - order_placed: 주문 추적 시작
  - order_filled: 포지션 업데이트, 알람 발송, DB 저장
  - order_failed: 재시도 로직 또는 알람
  - order_cancelled: 포지션 상태 업데이트
```

**5. 포지션 이벤트 (Position Events)**
```
이벤트명: position_opened, position_closed, position_updated
트리거: 포지션 상태 변화
데이터:
  - position_id: str
  - symbol: str
  - side: str
  - entry_price: float
  - quantity: float
  - leverage: int
  - unrealized_pnl: float (position_updated에만)
  - realized_pnl: float (position_closed에만)
  - timestamp: datetime

핸들러:
  - position_opened: 디스코드 알람, 대시보드 업데이트
  - position_closed: 디스코드 알람, 통계 업데이트, DB 저장
  - position_updated: 대시보드 실시간 업데이트
```

**6. 리스크 이벤트 (Risk Events)**
```
이벤트명: daily_loss_limit_reached, risk_threshold_exceeded
트리거: 리스크 한도 초과
데이터:
  - current_loss: float
  - loss_limit: float
  - account_balance: float
  - timestamp: datetime

핸들러:
  1. 모든 전략 신규 진입 차단
  2. 디스코드 긴급 알람
  3. 시스템 로그 기록
```

**7. WebSocket 이벤트 (WebSocket Events)**
```
이벤트명: ws_connected, ws_disconnected, ws_error, ws_reconnecting
트리거: WebSocket 연결 상태 변화
데이터:
  - connection_id: str
  - symbol: str (해당되는 경우)
  - error_message: str (ws_error에만)
  - retry_count: int (ws_reconnecting에만)

핸들러:
  - ws_connected: 로그 기록, 구독 시작
  - ws_disconnected: 재연결 로직 트리거, 알람
  - ws_error: 에러 로그, 재연결 시도
  - ws_reconnecting: 알람 발송
```

**8. 시스템 이벤트 (System Events)**
```
이벤트명: system_started, system_stopped, system_error, config_changed
트리거: 시스템 상태 변화
데이터:
  - event_type: str
  - message: str
  - timestamp: datetime
  - error_details: dict (system_error에만)

핸들러:
  - system_started: 초기화, 포지션 복구, 알람
  - system_stopped: 정리 작업, 알람
  - system_error: 에러 로그, 긴급 알람, 재시작 판단
  - config_changed: 설정 재로드
```

#### 4.1.3 이벤트 처리 흐름

```
[시장 데이터 수신] → [이벤트 생성] → [이벤트 큐] → [이벤트 디스패처] → [핸들러 실행]
                                                              ↓
                                                    [후속 이벤트 생성]
```

**구체적인 흐름 예시 (포지션 진입)**:
```
1. candle_closed 이벤트 발생 (1분봉 마감)
   ↓
2. indicators_updated 이벤트 발생 (ICT 지표 재계산)
   ↓
3. signal_generated 이벤트 발생 (전략 A 조건 충족)
   ↓
4. 리스크 검증 (이벤트 아님, 동기 처리)
   ↓
5. order_placed 이벤트 발생 (주문 전송)
   ↓
6. order_filled 이벤트 발생 (주문 체결)
   ↓
7. position_opened 이벤트 발생 (포지션 생성)
   ↓
8. 디스코드 알람 전송, DB 저장, 대시보드 업데이트
```

#### 4.1.4 이벤트 우선순위

높은 우선순위 → 낮은 우선순위 순서:

1. **긴급 (Critical)**: 즉시 처리
   - system_error
   - daily_loss_limit_reached
   - ws_disconnected

2. **높음 (High)**: 빠른 처리 필요
   - order_filled
   - order_failed
   - signal_generated

3. **중간 (Medium)**: 정상 처리
   - candle_closed
   - indicators_updated
   - position_updated

4. **낮음 (Low)**: 여유 처리
   - config_changed
   - 대시보드 업데이트 (비실시간)

#### 4.1.5 이벤트 핸들러 구조

**핸들러 인터페이스**:
```python
class EventHandler:
    async def handle(self, event: Event) -> None:
        """이벤트 처리 메인 로직"""
        pass

    async def on_error(self, event: Event, error: Exception) -> None:
        """에러 처리 로직"""
        pass
```

**핸들러 등록 방식**:
```python
event_bus.subscribe('candle_closed', CandleHandler())
event_bus.subscribe('signal_generated', SignalHandler())
event_bus.subscribe('order_filled', OrderFilledHandler())
```

#### 4.1.6 이벤트 버스 (Event Bus)

중앙 이벤트 관리 시스템:
- **비동기 큐**: asyncio.Queue 기반
- **구독/발행 패턴**: Pub/Sub
- **핸들러 등록/해제**: 동적 관리
- **에러 격리**: 한 핸들러 실패가 다른 핸들러에 영향 없음

### 4.2 전체 시스템 구조

```
┌─────────────────────────────────────────────────┐
│          바이낸스 선물 거래소                      │
│         (WebSocket + REST API)                  │
└───────────────┬─────────────────────────────────┘
                │
                ▼
┌─────────────────────────────────────────────────┐
│          WebSocket Manager                      │
│  - 연결 관리 및 자동 재연결                        │
│  - 실시간 캔들 데이터 수신                         │
│  - 이벤트 생성: candle_closed, ws_*             │
└───────────────┬─────────────────────────────────┘
                │
                ▼
┌─────────────────────────────────────────────────┐
│          Event Bus (중앙 이벤트 관리)             │
│  - 이벤트 큐 및 디스패칭                          │
│  - 핸들러 등록 및 실행                            │
│  - 우선순위 관리                                  │
└───┬──────┬──────┬──────┬──────┬─────────────────┘
    │      │      │      │      │
    ▼      ▼      ▼      ▼      ▼
┌───────┐┌──────┐┌──────┐┌─────┐┌──────────┐
│ICT    ││전략  ││리스크││주문 ││모니터링  │
│지표   ││실행  ││관리  ││실행 ││& 알람    │
│엔진   ││엔진  ││      ││     ││          │
└───────┘└──────┘└──────┘└─────┘└──────────┘
    │      │      │      │      │
    └──────┴──────┴──────┴──────┘
                │
                ▼
┌─────────────────────────────────────────────────┐
│          데이터 저장 레이어 (SQLite)              │
│  - 거래 이력, 통계, 백테스팅 결과                  │
└─────────────────────────────────────────────────┘
```

### 4.3 핵심 컴포넌트

#### 4.3.1 WebSocket Manager
- 바이낸스 WebSocket 연결 관리
- 자동 재연결 기능
- 심볼별 독립적인 스트림 관리
- 연결 상태 모니터링
- **이벤트 발행**: candle_closed, ws_connected, ws_disconnected, ws_error

#### 4.3.2 Event Bus
- 중앙 집중식 이벤트 관리
- 비동기 이벤트 큐
- 핸들러 등록/해제
- 우선순위 기반 처리

#### 4.3.3 ICT Indicator Engine
- 멀티 타임프레임 데이터 처리
- 지표 계산 최적화
- 실시간 업데이트
- **이벤트 수신**: candle_closed
- **이벤트 발행**: indicators_updated

#### 4.3.4 Strategy Engine
- 3가지 전략 독립 실행
- 신호 우선순위 관리
- 중복 진입 방지
- **이벤트 수신**: indicators_updated
- **이벤트 발행**: signal_generated

#### 4.3.5 Risk Manager
- 실시간 계좌 잔고 추적
- 포지션 크기 계산
- 일일 손실 한도 모니터링
- **이벤트 수신**: signal_generated, position_closed
- **이벤트 발행**: daily_loss_limit_reached, risk_threshold_exceeded

#### 4.3.6 Order Executor
- 비동기 주문 실행
- 실패 재시도 로직
- 주문 상태 추적
- **이벤트 수신**: signal_generated (리스크 승인 후)
- **이벤트 발행**: order_placed, order_filled, order_failed

#### 4.3.7 Position Manager
- 포지션 상태 추적
- 미청산 포지션 관리
- 시스템 재시작 시 복구
- **이벤트 수신**: order_filled
- **이벤트 발행**: position_opened, position_closed, position_updated

#### 4.3.8 Monitoring & Alert Manager
- 디스코드 웹훅 알람
- 대시보드 업데이트
- 로깅
- **이벤트 수신**: position_*, order_*, daily_loss_limit_reached, system_*

#### 4.3.9 Database Manager
- SQLite 연동
- 거래 기록 저장
- 통계 조회 최적화
- **이벤트 수신**: position_closed, 백테스팅 결과

## 5. 기능 요구사항

### 5.1 데이터 수신 및 처리

#### 5.1.1 실시간 데이터 수신
- WebSocket을 통한 실시간 캔들 데이터 수신
  - 1분봉, 15분봉, 1시간봉
- 주문 체결 이벤트 수신
- 계좌 잔고 업데이트 수신

#### 5.1.2 초기 데이터 로드
- 시스템 시작 시 과거 캔들 데이터 로드
  - 최소 요구량: 각 타임프레임별 200-500개 캔들
  - 목적: ICT 지표 계산용 충분한 히스토리 확보
- REST API를 통한 데이터 가져오기

#### 5.1.3 데이터 저장
- **영구 저장** (SQLite):
  - 포지션 진입/청산 이력
  - 수익/손실 통계
  - 전략별 성과 데이터
  - 백테스팅 결과
- **임시 저장** (메모리):
  - 실시간 캔들 데이터
  - 계산된 ICT 지표
  - 재시작 시 거래소에서 재로드

### 5.2 매매 실행

#### 5.2.1 주문 생성
- 시장가 주문 (Market Order)
- 손절/익절 주문 (Stop Loss / Take Profit)
- 레버리지 설정 (5배 고정)

#### 5.2.2 포지션 관리
- 현재 포지션 조회
- 미청산 포지션 추적
- 시스템 재시작 시 미청산 포지션 자동 감지
- 포지션 강제 청산 기능

#### 5.2.3 주문 실패 처리
- 최대 3회 재시도
- 실패 시 디스코드 알람 + 로그 기록
- 재시도 간격: 1초, 2초, 5초

### 5.3 백테스팅

#### 5.3.1 백테스팅 엔진
- 과거 1년 데이터 기반 시뮬레이션
- 전략별 독립적인 백테스팅
- 슬리피지 및 수수료 고려

#### 5.3.2 성과 지표
- 승률 (Win Rate)
- Profit Factor
- Sharpe Ratio
- Maximum Drawdown
- Total Return
- 평균 손익비 (Average R:R)

#### 5.3.3 결과 저장
- SQLite에 백테스팅 결과 저장
- 대시보드에서 시각화

### 5.4 모니터링 및 대시보드

#### 5.4.1 웹 대시보드
- **기술 스택**: FastAPI + HTML/CSS/JavaScript
- **보안**: 비밀번호 인증
- **접근 제어**: VM 방화벽 + 애플리케이션 레벨 인증

#### 5.4.2 표시 정보
1. **현재 포지션 상태**
   - 심볼, 방향 (Long/Short)
   - 진입가, 현재가
   - 미실현 손익 (PnL)
   - 레버리지
   - 손절/익절 레벨

2. **전략별 통계**
   - 전략 A, B, C 각각의 성과
   - 승률, 총 거래 수
   - 평균 손익, Profit Factor

3. **계좌 정보**
   - 총 잔고 (USDT)
   - 사용 가능 잔고
   - 일일 손익
   - 누적 손익

4. **최근 거래 이력**
   - 최근 10-20개 거래
   - 시간, 심볼, 방향, 진입가, 청산가, 손익

5. **시스템 상태**
   - WebSocket 연결 상태
   - 마지막 업데이트 시간
   - 활성 전략

#### 5.4.3 제어 기능
- 봇 시작/정지 버튼
- 긴급 전체 청산 버튼
- 신규 진입 차단/허용 토글
- 전략별 활성화/비활성화

### 5.5 알람 시스템 (디스코드)

#### 5.5.1 알람 트리거
1. **포지션 진입**
   - 전략명, 심볼, 방향, 진입가, 수량

2. **포지션 청산**
   - 심볼, 청산가, 손익 (% 및 USDT)

3. **손절/익절 도달**
   - 어떤 레벨에서 청산되었는지

4. **일일 손실 한도 도달**
   - 현재 손실액, 한도
   - 신규 진입 차단 알림

5. **시스템 오류/재시작**
   - 오류 메시지
   - WebSocket 재연결 시도
   - 시스템 재시작 알림

#### 5.5.2 알람 형식
- **방식**: 디스코드 웹훅
- **내용**: 텍스트 메시지
- **형식 예시**:
  ```
  🟢 포지션 진입 (전략 A)
  심볼: BTCUSDT
  방향: LONG
  진입가: $65,432.10
  수량: 0.15 BTC
  레버리지: 5x
  손절: $64,800 / 익절: $66,500
  ```

### 5.6 운영 및 제어

#### 5.6.1 봇 제어 방식
1. **웹 대시보드**
   - 시작/정지 버튼
   - 긴급 중지 (전체 청산)
   - 설정 변경

2. **커맨드라인 (systemd)**
   - `systemctl start trading-bot`
   - `systemctl stop trading-bot`
   - `systemctl restart trading-bot`
   - `systemctl status trading-bot`

#### 5.6.2 긴급 중지 기능
- **전체 포지션 즉시 청산**: 모든 미청산 포지션 시장가 청산
- **신규 진입 차단**: 모든 전략의 신호 무시

#### 5.6.3 설정 관리
**운영 파라미터** (실시간 변경 가능, 재시작 불필요):
- 손절 톨러런스
- 익절 레벨 조정
- 레버리지 배율
- 거래당 리스크 (%)
- 일일 손실 한도

**코어 파라미터** (재시작 필요):
- 사용할 전략 선택 (A, B, C)
- 거래 심볼 목록
- 타임프레임 설정
- ICT 지표 계산 로직 변경

## 6. 비기능 요구사항

### 6.1 성능

#### 6.1.1 응답 시간
- 신호 발생 후 주문 실행: 향후 측정 및 최적화
- 현재는 정확성 우선

#### 6.1.2 백테스팅 성능
- 정확성 > 속도
- 1년 데이터 처리 시간은 제한 없음

#### 6.1.3 리소스 사용
- 최소 VM 사양에서 안정 동작
- 메모리 효율적인 캔들 데이터 관리

#### 6.1.4 이벤트 처리 성능
- 이벤트 처리 지연: 평균 < 100ms
- 이벤트 큐 크기: 최대 1000개
- 핸들러 타임아웃: 30초 (재시도 가능)

### 6.2 안정성 및 가용성

#### 6.2.1 WebSocket 연결 관리
- **연결 끊김 감지**: 하트비트 체크
- **자동 재연결**: 무제한 재시도 (지수 백오프)
- **알람**: 연결 끊김 시 디스코드 알람
- **데이터 무결성**: 재연결 후 누락 데이터 복구

#### 6.2.2 시스템 재시작
- **상태 복구**:
  - 미청산 포지션 자동 감지 (바이낸스 API 조회)
  - 포지션에 대한 손절/익절 주문 재설정
- **데이터 초기화**:
  - 과거 캔들 데이터 재로드
  - ICT 지표 재계산

#### 6.2.3 로깅
- **로그 레벨**: INFO
  - 중요 이벤트 기록
  - 주문 실행, 포지션 변경
  - WebSocket 상태 변화
  - 에러 및 경고

- **로그 저장**:
  - 파일 로테이션: 일별
  - 보관 기간: 최대 7일
  - 형식: JSON 또는 구조화된 텍스트

- **로그 위치**: `/var/log/trading-bot/` 또는 프로젝트 내 `logs/`

#### 6.2.4 이벤트 시스템 안정성
- **에러 격리**: 한 핸들러 실패가 다른 핸들러에 영향 없음
- **Dead Letter Queue**: 반복 실패 이벤트 별도 저장
- **타임아웃 관리**: 장시간 실행 핸들러 강제 종료

### 6.3 보안

#### 6.3.1 API 키 관리
- **저장 방식**: `.env` 파일 (환경 변수)
- **권한 제한**:
  - ✅ 읽기 권한 (잔고, 포지션 조회)
  - ✅ 거래 권한 (주문 생성/취소)
  - ❌ 출금 권한 **절대 부여하지 않음**

- **파일 권한**: `.env` 파일 600 (소유자만 읽기/쓰기)

#### 6.3.2 대시보드 보안
- **인증**: 비밀번호 기반 로그인
- **세션 관리**: JWT 또는 세션 토큰
- **HTTPS**: 프로덕션 환경에서 권장 (향후 추가)

#### 6.3.3 VM 보안
- **방화벽**: UFW 또는 iptables
  - 대시보드 포트만 특정 IP에서 접근 허용
  - SSH 포트 변경 및 키 기반 인증

- **OS 보안**: 정기적인 보안 패치 적용

### 6.4 확장성

#### 6.4.1 현재 제약
- 동시 포지션: 1개
- 거래 심볼: 기본 2개 + 옵션 3개

#### 6.4.2 향후 확장 고려
- 다중 포지션 관리
- 추가 전략 플러그인
- Partial Take Profit
- Trailing Stop
- 다른 거래소 연동

#### 6.4.3 이벤트 시스템 확장성
- **새 이벤트 추가**: 핸들러 등록만으로 확장 가능
- **핸들러 플러그인**: 독립적인 모듈로 추가
- **멀티 프로세스**: 향후 이벤트 버스를 Redis/RabbitMQ로 교체 가능

## 7. 테스트 환경

### 7.1 테스트넷
- **바이낸스 테스트넷 연동**: 필수
- **메인넷과 별도 운영**: 독립적인 설정 파일
- **테스트 시나리오**:
  - 전략 검증
  - 주문 실행 테스트
  - 긴급 중지 테스트
  - WebSocket 재연결 테스트
  - 이벤트 처리 흐름 검증

### 7.2 드라이런 모드
- **불필요**: 테스트넷으로 충분

## 8. 개발 우선순위

### Phase 1: 기본 인프라 (핵심 기능)
1. **환경 설정**
   - Python 프로젝트 구조
   - 의존성 관리 (requirements.txt / pyproject.toml)
   - .env 파일 구성

2. **이벤트 시스템 구현**
   - Event 클래스 정의
   - EventBus 구현 (asyncio.Queue 기반)
   - 핸들러 인터페이스 정의
   - 우선순위 큐 구현

3. **바이낸스 연동**
   - ccxt.pro WebSocket 연결
   - REST API 연동 (주문, 잔고 조회)
   - 테스트넷 연결 확인
   - WebSocket 이벤트 발행 (candle_closed, ws_*)

4. **데이터 수신**
   - 실시간 캔들 데이터 수신 (1m, 15m, 1h)
   - 과거 캔들 로드 기능
   - 메모리 기반 캔들 데이터 관리
   - candle_closed 이벤트 발행

5. **데이터 저장**
   - SQLite 데이터베이스 설정
   - 거래 이력 테이블
   - 통계 테이블

### Phase 2: ICT 지표 엔진
6. **Order Blocks 감지**
   - 고점/저점 기반 OB 식별
   - 멀티 타임프레임 OB 추적
   - candle_closed 이벤트 수신

7. **Fair Value Gaps 계산**
   - FVG 형성 조건 구현
   - FVG 채움 여부 추적

8. **Breaker Blocks 인식**
   - OB 깨진 후 역할 전환 로직

9. **Liquidity Zones 매핑**
   - 고점/저점 기반 유동성 레벨
   - Liquidity Sweep 감지

10. **Market Structure 분석**
    - Higher High / Lower Low 패턴
    - BMS (Break of Market Structure) 확인

11. **indicators_updated 이벤트 발행**
    - ICT 지표 계산 완료 후 이벤트 발행

### Phase 3: 전략 실행
12. **전략 A (보수적) 구현**
    - 1시간 BMS → 15분 FVG/OB → 1분 진입
    - indicators_updated 이벤트 수신
    - signal_generated 이벤트 발행

13. **전략 B (공격적) 구현**
    - 15분 Liquidity Sweep + FVG
    - signal_generated 이벤트 발행

14. **전략 C (혼합) 구현**
    - 1시간 추세 + 15분 OB/FVG + Liquidity
    - signal_generated 이벤트 발행

15. **신호 통합 및 우선순위**
    - 중복 신호 제거
    - 전략별 활성화/비활성화

### Phase 4: 리스크 관리
16. **포지션 사이징**
    - 계좌 잔고 기반 2% 리스크 계산
    - 레버리지 5배 적용
    - signal_generated 이벤트 수신

17. **손절/익절 레벨 계산**
    - 구조적 SL + 톨러런스
    - Liquidity 기반 TP

18. **일일 손실 한도**
    - 실시간 손익 추적
    - 6% 한도 초과 시 daily_loss_limit_reached 이벤트 발행
    - 진입 차단

### Phase 5: 주문 실행
19. **주문 생성 및 실행**
    - 시장가 주문
    - SL/TP 주문
    - signal_generated 이벤트 수신 (리스크 승인 후)
    - order_placed, order_filled, order_failed 이벤트 발행

20. **주문 실패 처리**
    - 재시도 로직 (최대 3회)
    - 에러 로깅 및 알람
    - order_failed 이벤트 처리

21. **포지션 추적**
    - 미청산 포지션 모니터링
    - order_filled 이벤트 수신
    - position_opened, position_closed, position_updated 이벤트 발행
    - 시스템 재시작 시 복구

### Phase 6: 모니터링 및 알람
22. **디스코드 웹훅 알람**
    - position_*, order_*, daily_loss_limit_reached 이벤트 수신
    - 포지션 진입/청산
    - 손절/익절
    - 시스템 오류

23. **로깅 시스템**
    - INFO 레벨 로그
    - 7일 로테이션
    - 모든 이벤트 로깅

24. **웹 대시보드 (기본)**
    - FastAPI 백엔드
    - position_updated 이벤트 수신
    - 현재 포지션 표시
    - 계좌 잔고 표시
    - 전략 상태 표시

### Phase 7: 백테스팅
25. **백테스팅 엔진**
    - 1년 과거 데이터 시뮬레이션
    - 전략별 성과 분석
    - 이벤트 시스템 재사용 (시뮬레이션 모드)

26. **백테스팅 결과 저장 및 시각화**
    - SQLite 저장
    - 대시보드 통합

### Phase 8: 운영 및 안정성
27. **WebSocket 재연결 로직**
    - 자동 재연결
    - ws_* 이벤트 발행
    - 알람 및 로그

28. **시스템 재시작 처리**
    - 미청산 포지션 복구
    - system_started 이벤트 발행
    - SL/TP 재설정

29. **긴급 중지 기능**
    - 전체 청산
    - 신규 진입 차단

30. **설정 관리**
    - 운영 파라미터 실시간 변경
    - config_changed 이벤트 발행
    - 코어 파라미터 재시작 필요

### Phase 9: 대시보드 고도화
31. **통계 및 차트**
    - 전략별 통계
    - 최근 거래 이력
    - 손익 그래프

32. **제어 기능 확장**
    - 봇 시작/정지
    - 긴급 중지
    - 전략 활성화/비활성화

### Phase 10: 배포 및 운영
33. **VM 배포**
    - systemd 서비스 설정
    - 로그 로테이션
    - 모니터링

34. **보안 강화**
    - API 키 권한 검증
    - 대시보드 인증
    - 방화벽 설정

35. **문서화**
    - 설치 가이드
    - 운영 매뉴얼
    - 트러블슈팅 가이드
    - 이벤트 시스템 가이드

## 9. 성공 기준

### 9.1 기술적 성공 기준
- [ ] 바이낸스 WebSocket 연결 안정성 99% 이상
- [ ] 주문 실행 성공률 99% 이상 (3회 재시도 포함)
- [ ] 시스템 가동률 (Uptime) 99% 이상
- [ ] WebSocket 재연결 30초 이내
- [ ] 미청산 포지션 100% 복구
- [ ] 이벤트 처리 평균 지연 < 100ms
- [ ] 핸들러 에러율 < 1%

### 9.2 기능적 성공 기준
- [ ] 3가지 전략 모두 정상 작동
- [ ] ICT 지표 정확도 검증 (백테스팅 기준)
- [ ] 일일 손실 한도 준수 100%
- [ ] 긴급 중지 기능 정상 작동
- [ ] 모든 이벤트 정상 발행 및 처리

### 9.3 운영적 성공 기준
- [ ] 디스코드 알람 누락 없음
- [ ] 대시보드 실시간 업데이트 (1초 지연 이내)
- [ ] 로그 정상 기록 및 로테이션

## 10. 제약 사항 및 가정

### 10.1 제약 사항
- VULTR VM 최소 사양 (비용 최적화)
- SQLite 사용 (단일 서버 환경)
- 동시 포지션 1개 제한 (Phase 1)
- 단일 프로세스 이벤트 버스 (향후 분산 가능)

### 10.2 가정
- 바이낸스 API 안정성 확보
- 충분한 거래량 및 유동성 (BTC, ETH)
- 인터넷 연결 안정성
- 이벤트 처리 순서 보장 (asyncio.Queue)

### 10.3 향후 제거 예정 제약
- 동시 포지션 제한 → 다중 포지션 지원
- SQLite → PostgreSQL/MongoDB 마이그레이션 (확장성)
- 단일 거래소 → 멀티 거래소 지원
- 단일 프로세스 이벤트 버스 → Redis/RabbitMQ 분산 시스템

## 11. 용어 정의

- **ICT (Inner Circle Trader)**: 기관 트레이딩 컨셉을 기반으로 한 매매 방법론
- **OB (Order Block)**: 기관 주문이 집중된 가격 블록
- **FVG (Fair Value Gap)**: 급격한 가격 이동으로 인한 가격 불균형 영역
- **BMS (Break of Market Structure)**: 시장 구조의 전환점
- **Liquidity Sweep**: 유동성을 사냥하는 가격 움직임
- **USDT**: Tether, 달러 연동 스테이블코인
- **Perpetual Futures**: 만기가 없는 무기한 선물 계약
- **WebSocket**: 실시간 양방향 통신 프로토콜
- **Event-Driven Architecture**: 이벤트 발생과 처리를 중심으로 동작하는 아키텍처
- **Event Bus**: 이벤트를 중앙에서 관리하고 분배하는 시스템
- **Handler**: 특정 이벤트를 처리하는 함수 또는 클래스
- **Pub/Sub**: Publish/Subscribe, 발행/구독 패턴

---

**문서 버전**: 1.1
**작성일**: 2025-10-18
**마지막 수정**: 2025-10-18 (이벤트 기반 아키텍처 추가)
**작성자**: 프로젝트 기획자
**승인자**: (미정)
